DROP DATABASE IF EXISTS `myapp`;
CREATE DATABASE `myapp`;
USE `myapp`;

INSERT INTO questions (question_id, category, question_text, correct_answer, difficulty, created_by, attempts) VALUES 
(1, 'JOIN', 'Afisati profesorii (numele si prenumele) impreuna cu cursurile pe care fiecare le tin.', 'SELECT nume, prenume, titlu_curs FROM profesori p JOIN didactic d ON p.id_prof = d.id_prof JOIN cursuri c ON d.id_curs = c.id_curs;', 'usoara', 1, 0),
(2, 'JOIN', 'Afisati studentii si notele pe care le au luat si profesorii care le-au pus acele note.', 'SELECT s.nume, s.prenume, n.valoare, p.nume, p.prenume FROM studenti s JOIN note n ON s.nr_matricol=n.nr_matricol JOIN cursuri c ON n.id_curs=c.id_curs JOIN didactic d ON c.id_curs=d.id_curs JOIN profesori p ON d.id_prof=p.id_prof;', 'medie', 1, 0),
(3, 'JOIN', 'Afisati denumirile cursurilor la care s-au pus note cel mult egale cu 8 (<=8).', 'SELECT DISTINCT titlu_curs FROM cursuri c JOIN note n ON c.id_curs=n.id_curs WHERE n.valoare<=8 MINUS SELECT DISTINCT titlu_curs FROM cursuri c JOIN note n c.id_curs=n.id_curs WHERE n.valoare>8;', 'grea', 1, 0),
(4, 'GROUP BY', 'Afisati numarul de studenti din fiecare an.', 'SELECT COUNT(*), an FROM Studenti GROUP BY an;', 'usoara', 1, 0),
(5, 'GROUP BY', 'Afisati numarul de note pus în fiecare zi a saptamanii. Ordonati descrescator dupa numarul de note.', 'SELECT TO_CHAR(data_notare, ''Day'') "Ziua", COUNT(TO_CHAR(data_notare, ''Day'')) "Numarul de note" FROM note GROUP BY TO_CHAR(data_notare, ''Day'') ORDER BY "Numarul de note" DESC; ', 'medie', 1, 0),
(6, 'GOURP BY', 'Afisati numele si mediile studentilor din grupa A2 anul 3.', 'SELECT s.nume AVG(valoare) FROM Studenti s JOIN note n ON s.nr_matricol=n.nr_matricol WHERE an=3 AND grupa LIKE ''A2'' GROUP BY s.nume, s.nr_matricol;', 'grea', 1, 0),
(7, 'Subinterogari', 'Afisati numele studentilor care iau cea mai mare bursa acordata.', 'SELECT nume, bursa FROM studenti WHERE bursa = (SELECT MAX(bursa) FROM studenti); ', 'usoara', 1, 0),
(8, 'Subinterogari', 'Pentru fiecare grupa afisati numele studentilor care au obtinut cea mai mică nota la nivelul grupei.', 'SELECT nume, bursa FROM studenti WHERE bursa = (SELECT MAX(bursa) FROM studenti);', 'medie', 1, 0),
(9, 'Subinterogari', 'Afisati primii 3 studenti in ordine alfabetica a numelui si prenumelui este ca mai intai asiguram efectuarea sortarii si abia dupa limitarea numarului de linii.', 'SELECT * FROM (SELECT * FROM studenti ORDER BY nume, prenume) WHERE ROWNUM<4;', 'grea', 1, 0),
(10, 'ORDER BY', 'Selecteaza toate informatiile despre studenti și notele acestora, ordonand rezultatele în functie de numele studentilor.', 'SELECT * FROM studenti JOIN note ON studenti.nr_matricol = note.nr_matricol ORDER BY nume; ', 'medie', 1, 0),
(11, 'ORDER BY', 'Afisati numarul de studenti din fiecare grupa a fiecarui an de studiu. Ordonati crescator dupa anul de studiu si dupa grupa.', 'SELECT an, grupa, COUNT(*) FROM Studenti GROUP BY an, grupa ORDER BY an ASC, grupa ASC;', 'grea', 1, 0),
(12, 'Functii de agregare', 'Afisati suma totala cheltuita de facultate pentru acordarea burselor', 'SELECT SUM(bursa) FROM Studenti;', 'usoara', 1, 0),
(13, 'Functii de agregare', ' Afisati valoarea bursei/cap de student (se considera ca studentii care nu sunt bursieri primesc 0 RON);', 'SELECT AVG(NVL(bursa, ''0'')) FROM Studenti;', 'medie', 1, 0),
(14, 'Functii de agregare', 'Afisati numarul de studenti din fiecare grupa a fiecarui an de studiu si specificati cati dintre acestia sunt bursieri.', 'SELECT an, grupa, COUNT(*), COUNT(bursa) FROM Studenti GROUP BY an, grupa;', 'grea', 1, 0);

CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'student') NOT NULL
);

CREATE TABLE questions (
    question_id INT AUTO_INCREMENT PRIMARY KEY,
    category VARCHAR(255) NOT NULL,
    question_text TEXT NOT NULL,
    correct_answer TEXT NOT NULL,
    difficulty VARCHAR(10) CHECK (difficulty IN ('usoara', 'medie', 'grea')) DEFAULT 'medium',
    created_by INT,
    attempts INT,
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

CREATE TABLE attempts (
    attempt_id INT AUTO_INCREMENT PRIMARY KEY,
	question_id INT,
    user_id INT,
    user_answer TEXT,
    is_correct BOOLEAN,
    FOREIGN KEY (question_id) REFERENCES questions(question_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


CREATE TABLE ratings (
    rating_id SERIAL PRIMARY KEY,
    question_id INT,
    user_id INT,
    difficulty_rating VARCHAR(10) CHECK (difficulty_rating IN ('usoara', 'medie', 'grea')),
    is_incorrect BOOLEAN DEFAULT FALSE,
    comment TEXT,
    FOREIGN KEY (question_id) REFERENCES questions(question_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

ALTER TABLE ratings ADD UNIQUE KEY unique_rating (question_id, user_id);